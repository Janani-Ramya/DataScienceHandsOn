# -*- coding: utf-8 -*-
"""Mercedes-Benz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JfRzPgc0Yi24nr6DAfaTXcKCM3pDEw0O
"""

import pandas as pd 
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import preprocessing

train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')

print(train_df.shape) 
print(train_df.columns)

print(test_df.shape) 
print(test_df.columns)

train_df.head()

train_df.describe()

train_df.var()

(train_df.var() == 0)

(train_df.var() == 0).values

variance_with_zero = train_df.var()[train_df.var()==0].index.values
variance_with_zero

train_df = train_df.drop(variance_with_zero, axis=1)

print(train_df.shape)

train_df = train_df.drop(['ID'], axis=1)

train_df.head()

train_df.isnull().sum().values

train_df.isnull().any()

test_df.isnull().sum().values

train_df.nunique()

object_datatypes = train_df.select_dtypes(include=[object])
object_datatypes

object_datatype_columns = object_datatypes.columns
object_datatype_columns

label_encoder = preprocessing.LabelEncoder()
train_df['X0'].unique()

train_df['X0'] = label_encoder.fit_transform(train_df['X0'])

train_df['X0'].unique()

train_df['X1'] = label_encoder.fit_transform(train_df['X1'])
train_df['X2'] = label_encoder.fit_transform(train_df['X2'])
train_df['X3'] = label_encoder.fit_transform(train_df['X3'])
train_df['X4'] = label_encoder.fit_transform(train_df['X4'])

train_df['X5'] = label_encoder.fit_transform(train_df['X5'])
train_df['X6'] = label_encoder.fit_transform(train_df['X6'])
train_df['X8'] = label_encoder.fit_transform(train_df['X8'])

train_df.head()

from sklearn.decomposition import PCA

sklearn_pca = PCA(n_components=0.95)

sklearn_pca.fit(train_df)

x_train_transformed = sklearn_pca.transform(train_df)

print(x_train_transformed.shape)

sklearn_pca_98 = PCA(n_components=0.98)

sklearn_pca_98.fit(train_df)

x_train_transformed_98 = sklearn_pca_98.transform(train_df)
print(x_train_transformed_98.shape)

train_df.y

X = train_df.drop('y', axis=1)
y = train_df.y
xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=0.3,random_state=42)

print(xtrain)
print(xtrain.shape)

print(ytrain)
print(ytrain.shape)

print(xtest)
print(xtest.shape)

pca_xtrain = PCA(n_components=0.95)
pca_xtrain.fit(xtrain)

pca_xtrain_transformed = pca_xtrain.transform(xtrain)
print(pca_xtrain_transformed.shape)

pca_xtest = PCA(n_components=0.95)
pca_xtest.fit(xtest)

pca_xtest_transformed = pca_xtest.transform(xtest)
print(pca_xtest_transformed.shape)

print(pca_xtest.explained_variance_)
print(pca_xtest.explained_variance_ratio_)

test_df

test_object_datatypes = test_df.select_dtypes(include=[object])
test_object_datatypes

test_df['X0'] = label_encoder.fit_transform(test_df['X0'])
test_df['X1'] = label_encoder.fit_transform(test_df['X1'])
test_df['X2'] = label_encoder.fit_transform(test_df['X2'])
test_df['X3'] = label_encoder.fit_transform(test_df['X3'])
test_df['X4'] = label_encoder.fit_transform(test_df['X4'])
test_df['X5'] = label_encoder.fit_transform(test_df['X5'])
test_df['X6'] = label_encoder.fit_transform(test_df['X6'])
test_df['X8'] = label_encoder.fit_transform(test_df['X8'])

print(test_df)
print(test_df.shape)

test_df = test_df.drop('ID',axis=1)

pca_test_df = PCA(n_components=0.95)
pca_test_df.fit(test_df)

pca_test_df_transformed = pca_test_df.transform(test_df)
print(pca_test_df_transformed.shape)

print(pca_test_df.explained_variance_)
print(pca_test_df.explained_variance_ratio_)

import xgboost as xgb
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

xtrain, xvalid, ytrain, yvalid = train_test_split(xtrain, ytrain, test_size=0.2, random_state=4242)

d_train = xgb.DMatrix(xtrain, label=ytrain)
d_valid = xgb.DMatrix(xvalid, label=yvalid)
d_test = xgb.DMatrix(xtest)

params = {}
params['objective'] = 'reg:linear'
params['eta'] = 0.02
params['max_depth'] = 4

def xgb_r2_score(preds, dtrain):
    labels = dtrain.get_label()
    return 'r2', r2_score(labels, preds)

watchlist = [(d_train, 'train'), (d_valid, 'valid')]

clf = xgb.train(params, d_train, 1000, watchlist, early_stopping_rounds=50, feval=xgb_r2_score, maximize=True, verbose_eval=10)

p_test = clf.predict(d_test)

test_df = pd.read_csv('test.csv')
usable_columns = list(set(train_df.columns) - set(['ID', 'y']))

ytrain = train_df['y'].values
id_test = test_df['ID'].values

xtrain = train_df[usable_columns]
xtest = train_df[usable_columns]

for column in usable_columns:
    cardinality = len(np.unique(xtrain[column]))
    if cardinality == 1:
        xtrain.drop(column, axis=1) # Column with only one value is useless so we drop it
        xtest.drop(column, axis=1)
    if cardinality > 2: # Column is categorical
        mapper = lambda x: sum([ord(digit) for digit in x])
        xtrain[column] = xtrain[column].apply(mapper)
        xtest[column] = xtest[column].apply(mapper)
        
xtrain.head()

sub = pd.DataFrame()
sub['ID'] = ID
sub['y'] = p_test
sub.to_csv('xgb.csv', index=False)

sub.head()